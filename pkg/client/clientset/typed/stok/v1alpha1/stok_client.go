// Copyright Â© 2020 Louis Garman <louisgarman@gmail.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/leg100/stok/pkg/apis/stok/v1alpha1"
	"github.com/leg100/stok/pkg/client/clientset/scheme"
	rest "k8s.io/client-go/rest"
)

type StokV1alpha1Interface interface {
	RESTClient() rest.Interface
	AppliesGetter
	DestroysGetter
	ForceUnlocksGetter
	GetsGetter
	ImpsGetter
	InitsGetter
	OutputsGetter
	PlansGetter
	RefreshesGetter
	ShellsGetter
	ShowsGetter
	StatesGetter
	TaintsGetter
	UntaintsGetter
	ValidatesGetter
	WorkspacesGetter
}

// StokV1alpha1Client is used to interact with features provided by the stok.goalspike.com group.
type StokV1alpha1Client struct {
	restClient rest.Interface
}

func (c *StokV1alpha1Client) Applies(namespace string) ApplyInterface {
	return newApplies(c, namespace)
}

func (c *StokV1alpha1Client) Destroys(namespace string) DestroyInterface {
	return newDestroys(c, namespace)
}

func (c *StokV1alpha1Client) ForceUnlocks(namespace string) ForceUnlockInterface {
	return newForceUnlocks(c, namespace)
}

func (c *StokV1alpha1Client) Gets(namespace string) GetInterface {
	return newGets(c, namespace)
}

func (c *StokV1alpha1Client) Imps(namespace string) ImpInterface {
	return newImps(c, namespace)
}

func (c *StokV1alpha1Client) Inits(namespace string) InitInterface {
	return newInits(c, namespace)
}

func (c *StokV1alpha1Client) Outputs(namespace string) OutputInterface {
	return newOutputs(c, namespace)
}

func (c *StokV1alpha1Client) Plans(namespace string) PlanInterface {
	return newPlans(c, namespace)
}

func (c *StokV1alpha1Client) Refreshes(namespace string) RefreshInterface {
	return newRefreshes(c, namespace)
}

func (c *StokV1alpha1Client) Shells(namespace string) ShellInterface {
	return newShells(c, namespace)
}

func (c *StokV1alpha1Client) Shows(namespace string) ShowInterface {
	return newShows(c, namespace)
}

func (c *StokV1alpha1Client) States(namespace string) StateInterface {
	return newStates(c, namespace)
}

func (c *StokV1alpha1Client) Taints(namespace string) TaintInterface {
	return newTaints(c, namespace)
}

func (c *StokV1alpha1Client) Untaints(namespace string) UntaintInterface {
	return newUntaints(c, namespace)
}

func (c *StokV1alpha1Client) Validates(namespace string) ValidateInterface {
	return newValidates(c, namespace)
}

func (c *StokV1alpha1Client) Workspaces(namespace string) WorkspaceInterface {
	return newWorkspaces(c, namespace)
}

// NewForConfig creates a new StokV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*StokV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &StokV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new StokV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *StokV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new StokV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *StokV1alpha1Client {
	return &StokV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *StokV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
