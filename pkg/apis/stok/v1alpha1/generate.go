// +build ignore

package main

import (
	"fmt"
	"log"
	"os"
	"strings"
	"text/template"
)

//go:generate go run generate.go

func main() {
	for _, c := range Commands {
		// create the file
		f, err := os.Create(fmt.Sprintf("%s_types.go", strings.ReplaceAll(string(c), "-", "_")))
		if err != nil {
			log.Fatal(err)
		}
		defer f.Close()

		// replace <backtick> with `
		contents := backtickReplacer.Replace(schemas)

		// parse and render template
		template.Must(template.New("").Parse(contents)).Execute(f, struct {
			Plural string
			Kind   string
		}{
			Plural: c.Plural(),
			Kind:   c.Kind(),
		})
	}
}

var backtickReplacer = strings.NewReplacer("<backtick>", "`")

const schemas = `// Code generated by go generate; DO NOT EDIT.
package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// {{ .Kind }} is the Schema for the {{ .Plural }} API
// +kubebuilder:subresource:status
// +kubebuilder:resource:path={{ .Plural }},scope=Namespaced
// +genclient
type {{ .Kind }} struct {
	metav1.TypeMeta   <backtick>json:",inline"<backtick>
	metav1.ObjectMeta <backtick>json:"metadata,omitempty"<backtick>

	CommandSpec   <backtick>json:"spec,omitempty"<backtick>
	CommandStatus <backtick>json:"status,omitempty"<backtick>
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// {{ .Kind }}List contains a list of {{ .Kind }}
type {{ .Kind }}List struct {
	metav1.TypeMeta <backtick>json:",inline"<backtick>
	metav1.ListMeta <backtick>json:"metadata,omitempty"<backtick>
	Items           []{{ .Kind }} <backtick>json:"items"<backtick>
}

func init() {
	SchemeBuilder.Register(&{{ .Kind }}{}, &{{ .Kind }}List{})
}
`
