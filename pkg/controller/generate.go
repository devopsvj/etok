// +build ignore

package main

import (
	"fmt"

	"github.com/iancoleman/strcase"
	"github.com/leg100/stok/crdinfo"
	"github.com/leg100/stok/util"
)

func main() {
	for k, v := range crdinfo.Inventory {
		util.GenerateTemplate(v, addController, fmt.Sprintf("add_%s.go", strcase.ToSnake(k)))

		// dirname must reflect package name, and package name uses CmdInfo.GoName (if set)
		var dirname string
		if v.GoName != "" {
			dirname = v.GoName
		} else {
			dirname = v.Name
		}

		util.GenerateTemplate(v, controller, fmt.Sprintf("%s/%s_controller.go", strcase.ToSnake(dirname), strcase.ToSnake(k)))
	}
}

var addController = `// Code generated by go generate; DO NOT EDIT.
package controller

import (
		{{ .Name | ToLowerCamel }}Controller "github.com/leg100/stok/pkg/controller/{{ if ne .GoName "" }}{{ .GoName }}{{ else }}{{ .Name | ToSnake }}{{ end }}"
)

func init() {
        // AddToManagerFuncs is a list of functions to create controllers and add them to a manager.
        AddToManagerFuncs = append(AddToManagerFuncs, {{ .Name | ToLowerCamel }}Controller.Add)
}
`

var controller = `// Code generated by go generate; DO NOT EDIT.
package {{ if ne .GoName "" }}{{ .GoName }}{{ else }}{{ .Name | ToSnake }}{{ end }}

import (
	"context"

	v1alpha1 "github.com/leg100/stok/pkg/apis/stok/v1alpha1"
	"github.com/leg100/stok/pkg/controller/command"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller"
	"sigs.k8s.io/controller-runtime/pkg/handler"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/source"
)

var log = logf.Log.WithName("controller_{{ .Name | ToSnake }}")

// Add creates a new {{ .Name | ToCamel }} Controller and adds it to the Manager. The Manager will set fields on the Controller
// and Start it when the Manager is Started.
func Add(mgr manager.Manager) error {
	return add(mgr, newReconciler(mgr))
}

// newReconciler returns a new reconcile.Reconciler
func newReconciler(mgr manager.Manager) reconcile.Reconciler {
	return &Reconcile{{ .Name | ToCamel }}{client: mgr.GetClient(), scheme: mgr.GetScheme()}
}

// add adds a new Controller to mgr with r as the reconcile.Reconciler
func add(mgr manager.Manager, r reconcile.Reconciler) error {
	// Create a new controller
	c, err := controller.New("{{ .Name }}-controller", mgr, controller.Options{Reconciler: r})
	if err != nil {
		return err
	}

	// Watch for changes to primary resource {{ .Kind | ToCamel }}
	err = c.Watch(&source.Kind{Type: &v1alpha1.{{ .Kind | ToCamel }}{}}, &handler.EnqueueRequestForObject{})
	if err != nil {
		return err
	}

	// Watch for changes to secondary resource Pods and requeue the owner {{ .Kind | ToCamel }}
	err = c.Watch(&source.Kind{Type: &corev1.Pod{}}, &handler.EnqueueRequestForOwner{
		IsController: true,
		OwnerType:    &v1alpha1.{{ .Kind | ToCamel }}{},
	})
	if err != nil {
		return err
	}

	// Watch for changes to resource Workspace and requeue the associated {{ .Kind | ToCamel }}s
	err = c.Watch(&source.Kind{Type: &v1alpha1.Workspace{}}, &handler.EnqueueRequestsFromMapFunc{
		ToRequests: handler.ToRequestsFunc(func(a handler.MapObject) []reconcile.Request {
			rc := r.(*Reconcile{{ .Name | ToCamel }})
			cmdList := &v1alpha1.{{ .Kind | ToCamel }}List{}
			err = rc.client.List(context.TODO(), cmdList, client.InNamespace(a.Meta.GetNamespace()), client.MatchingLabels{
				"workspace": a.Meta.GetName(),
			})
			if err != nil {
				return []reconcile.Request{}
			}

			rr := []reconcile.Request{}
			for _, cmd := range cmdList.Items {
				rr = append(rr, reconcile.Request{
					NamespacedName: types.NamespacedName{
						Name:      cmd.GetName(),
						Namespace: cmd.GetNamespace(),
					},
				})
			}
			return rr
		}),
	})
	if err != nil {
		return err
	}
	return nil
}

// blank assignment to verify that Reconcile{{ .Name | ToCamel }} implements reconcile.Reconciler
var _ reconcile.Reconciler = &Reconcile{{ .Name | ToCamel }}{}

// Reconcile{{ .Name | ToCamel }} reconciles a {{ .Kind | ToCamel }} object
type Reconcile{{ .Name | ToCamel }} struct {
	// This client, initialized using mgr.Client() above, is a split client
	// that reads objects from the cache and writes to the apiserver
	client client.Client
	scheme *runtime.Scheme
}

// Reconcile reads that state of the cluster for a {{ .Kind | ToCamel }} object and makes changes based on the state read
// and what is in the {{ .Kind | ToCamel }}.Spec
// Note:
// The Controller will requeue the Request to be processed again if the returned error is non-nil or
// Result.Requeue is true, otherwise upon completion it will remove the work from the queue.
func (r *Reconcile{{ .Name | ToCamel }}) Reconcile(request reconcile.Request) (reconcile.Result, error) {
	reqLogger := log.WithValues("Request.Namespace", request.Namespace, "Request.Name", request.Name)
	reqLogger.V(1).Info("Reconciling {{ .Kind | ToCamel }}")

	return command.Reconcile(r.client, r.scheme, request, &v1alpha1.{{ .Kind | ToCamel }}{}, "{{ .Name }}")
}
`
